from atbash import atbash_encrypt, atbash_decrypt
from cesar import cesar_encrypt, cesar_decrypt, cesar_check_parameters
from polibia import polibia_encrypt, polibia_decrypt
from tritemiy import tritemiy_encrypt, tritemiy_decrypt
from belazo import belazo_encrypt, belazo_decrypt, belazo_check_parameters
from vigener import vigener_encrypt, vigener_decrypt, vigener_check_parameters
from matrix import matrix_encrypt, matrix_decrypt, matrix_check_parameters
from playfair import playfair_encrypt, playfair_decrypt, playfair_check_parameters

available_ciphers = [
    "Шифр АТБАШ", "Шифр Цезаря", "Шифр Полибия",
    "Шифр Тритемия", "Шифр Белазо", "Шифр Виженера",
    "Шифр Матричный", "Шифр Плейфера",
]

alphabet = [
    "а", "б", "в", "г", "д", "е", "ж", "з", "и", "й", "к", "л", "м",
    "н", "о", "п", "р", "с", "т", "у", "ф", "х", "ц", "ч", "ш", "щ",
    "ъ", "ы", "ь", "э", "ю", "я"
]

alphabet_polibia = [
    ["а", "б", "в", "г", "д", "е"],
    ["ж", "з", "и", "й", "к", "л"],
    ["м", "н", "о", "п", "р", "с"],
    ["т", "у", "ф", "х", "ц", "ч"],
    ["ш", "щ", "ъ", "ы", "ь", "э"],
    ["ю", "я"]
]

alphabet_playfair = [
    "а", "б", "в", "г", "д", "е", "ж", "з", "и", "к", "л", "м", "н",
    "о", "п", "р", "с", "т", "у", "ф", "х", "ц", "ч", "ш", "щ", "ь",
    "ы", "э", "ю", "я"
]

mem = {
    "bigTextFlag": False,
    "vigenerSwitch": False,
    "mode": "encrypt",
}

def text_preparation(text):
    if mem["bigTextFlag"]:
        return text.replace("ё", "е").replace(".", "тчк").replace(",", "зпт").replace("-", "тире").replace(" ", "прбл").replace(":", "двтч").replace(";", "тчсзп").replace("(", "отскб").replace(")", "зкскб").replace("?", "впрзн").replace("!", "восклзн").replace("\n", "првст").lower()
    else:
        return text.replace("ё", "е").replace(".", "тчк").replace(",", "зпт").replace("-", "тире").replace(" ", "").replace(":", "").replace(";", "").replace("(", "").replace(")", "").replace("?", "").replace("!", "").replace("\n", "").lower()

def cipher_parser():
    cipher_choose_input = input("Введите выбранный шифр: ")
    open_text_input = input("Введите открытый текст: ")
    cipher_text_input = input("Введите зашифрованный текст: ")
    cesar_shift = int(input("Введите сдвиг для шифра Цезаря: "))
    keyword = input("Введите ключевое слово для шифра Белазо или Плейфера: ")
    vigener_keyletter = input("Введите ключевую букву для шифра Виженера: ")
    matrix_input = list(map(int, input("Введите ключевую матрицу для шифра Матричный: ").split()))

    if cipher_choose_input == "Шифр АТБАШ":
        if mem["mode"] == "encrypt":
            cipher_text_input = atbash_encrypt(text_preparation(open_text_input), alphabet)
        elif mem["mode"] == "decrypt":
            open_text_input = atbash_decrypt(cipher_text_input, alphabet)
    elif cipher_choose_input == "Шифр Цезаря":
        if cesar_check_parameters(cesar_shift, alphabet):
            if mem["mode"] == "encrypt":
                cipher_text_input = cesar_encrypt(text_preparation(open_text_input), cesar_shift, alphabet)
            elif mem["mode"] == "decrypt":
                open_text_input = cesar_decrypt(cipher_text_input, cesar_shift, alphabet)
        else:
            if mem["mode"] == "encrypt":
                cipher_text_input = "Проверьте правильность ввода сдвига"
            elif mem["mode"] == "decrypt":
                open_text_input = "Проверьте правильность ввода сдвига"
    elif cipher_choose_input == "Шифр Полибия":
        if mem["mode"] == "encrypt":
            cipher_text_input = polibia_encrypt(text_preparation(open_text_input), alphabet_polibia)
        elif mem["mode"] == "decrypt":
            open_text_input = polibia_decrypt(cipher_text_input, alphabet_polibia)
    elif cipher_choose_input == "Шифр Тритемия":
        if mem["mode"] == "encrypt":
            cipher_text_input = tritemiy_encrypt(text_preparation(open_text_input), alphabet)
        elif mem["mode"] == "decrypt":
            open_text_input = tritemiy_decrypt(cipher_text_input, alphabet)
    elif cipher_choose_input == "Шифр Белазо":
        if belazo_check_parameters(keyword.lower(), alphabet):
            if mem["mode"] == "encrypt":
                cipher_text_input = belazo_encrypt(text_preparation(open_text_input), keyword.lower(), alphabet)
            elif mem["mode"] == "decrypt":
                open_text_input = belazo_decrypt(cipher_text_input, keyword.lower(), alphabet)
        else:
            if mem["mode"] == "encrypt":
                cipher_text_input = "Проверьте правильность ввода ключевого слова"
            elif mem["mode"] == "decrypt":
                open_text_input = "Проверьте правильность ввода ключевого слова"
    elif cipher_choose_input == "Шифр Виженера":
        mode = "cipherkey" if mem["vigenerSwitch"] else "selfkey"
        if vigener_check_parameters(vigener_keyletter.lower(), alphabet):
            if mem["mode"] == "encrypt":
                cipher_text_input = vigener_encrypt(text_preparation(open_text_input), vigener_keyletter.lower(), mode, alphabet)
            elif mem["mode"] == "decrypt":
                open_text_input = vigener_decrypt(cipher_text_input, vigener_keyletter.lower(), mode, alphabet)
        else:
            if mem["mode"] == "encrypt":
                cipher_text_input = "Проверьте правильность ввода ключевой буквы"
            elif mem["mode"] == "decrypt":
                open_text_input = "Проверьте правильность ввода ключевой буквы"
    elif cipher_choose_input == "Шифр Матричный":
        matrix = [
            matrix_input[:3],
            matrix_input[3:6],
            matrix_input[6:9]
        ]
        if matrix_check_parameters(matrix):
            if mem["mode"] == "encrypt":
                cipher_text_input = matrix_encrypt(text_preparation(open_text_input), matrix, alphabet)
            elif mem["mode"] == "decrypt":
                open_text_input = matrix_decrypt(cipher_text_input, matrix, alphabet)
        else:
            if mem["mode"] == "encrypt":
                cipher_text_input = "Проверьте правильность ввода ключевой матрицы"
            elif mem["mode"] == "decrypt":
                open_text_input = "Проверьте правильность ввода ключевой матрицы"
    elif cipher_choose_input == "Шифр Плейфера":
        if playfair_check_parameters(keyword.lower(), alphabet):
            if mem["mode"] == "encrypt":
                cipher_text_input = playfair_encrypt(text_preparation(open_text_input).replace("й", "и").replace("ъ", "ь"), keyword.lower(), alphabet_playfair)
            elif mem["mode"] == "decrypt":
                open_text_input = playfair_decrypt(cipher_text_input, keyword.lower(), alphabet_playfair)
        else:
            if mem["mode"] == "encrypt":
                cipher_text_input = "Проверьте правильность ввода ключевого слова"
            elif mem["mode"] == "decrypt":
                open_text_input = "Проверьте правильность ввода ключевого слова"
    else:
        pass

    return open_text_input, cipher_text_input

def big_text_switch_handler():
    mem["bigTextFlag"] = not mem["bigTextFlag"]

def vigener_mode_switch_handler():
    mem["vigenerSwitch"] = not mem["vigenerSwitch"]

def main():
    while True:
        cipher_parser()

if __name__ == "__main__":
    main()
