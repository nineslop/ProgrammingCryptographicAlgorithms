pi = [252, 238, 221, 17, 207, 110, 49, 22, 251, 196, 250, 218, 35, 197, 4, 77,
      233, 119, 240, 219, 147, 46, 153, 186, 23, 54, 241, 187, 20, 205, 95, 193,
      249, 24, 101, 90, 226, 92, 239, 33, 129, 28, 60, 66, 139, 1, 142, 79,
      5, 132, 2, 174, 227, 106, 143, 160, 6, 11, 237, 152, 127, 212, 211, 31,
      235, 52, 44, 81, 234, 200, 72, 171, 242, 42, 104, 162, 253, 58, 206, 204,
      181, 112, 14, 86, 8, 12, 118, 18, 191, 114, 19, 71, 156, 183, 93, 135,
      21, 161, 150, 41, 16, 123, 154, 199, 243, 145, 120, 111, 157, 158, 178, 177,
      50, 117, 25, 61, 255, 53, 138, 126, 109, 84, 198, 128, 195, 189, 13, 87,
      223, 245, 36, 169, 62, 168, 67, 201, 215, 121, 214, 246, 124, 34, 185, 3,
      224, 15, 236, 222, 122, 148, 176, 188, 220, 232, 40, 80, 78, 51, 10, 74,
      167, 151, 96, 115, 30, 0, 98, 68, 26, 184, 56, 130, 100, 159, 38, 65,
      173, 69, 70, 146, 39, 94, 85, 47, 140, 163, 165, 125, 105, 213, 149, 59,
      7, 88, 179, 64, 134, 172, 29, 247, 48, 55, 107, 228, 136, 217, 231, 137,
      225, 27, 131, 73, 76, 63, 248, 254, 141, 83, 170, 144, 202, 216, 133, 97,
      32, 113, 103, 164, 45, 43, 9, 91, 203, 155, 37, 208, 190, 229, 108, 82,
      89, 166, 116, 210, 230, 244, 180, 192, 209, 102, 175, 194, 57, 75, 99, 182]

pi_inv = [165, 45, 50, 143, 14, 48, 56, 192, 84, 230, 158, 57, 85, 126, 82, 145,
          100, 3, 87, 90, 28, 96, 7, 24, 33, 114, 168, 209, 41, 198, 164, 63,
          224, 39, 141, 12, 130, 234, 174, 180, 154, 99, 73, 229, 66, 228, 21, 183,
          200, 6, 112, 157, 65, 117, 25, 201, 170, 252, 77, 191, 42, 115, 132, 213,
          195, 175, 43, 134, 167, 177, 178, 91, 70, 211, 159, 253, 212, 15, 156, 47,
          155, 67, 239, 217, 121, 182, 83, 127, 193, 240, 35, 231, 37, 94, 181, 30,
          162, 223, 166, 254, 172, 34, 249, 226, 74, 188, 53, 202, 238, 120, 5, 107,
          81, 225, 89, 163, 242, 113, 86, 17, 106, 137, 148, 101, 140, 187, 119, 60,
          123, 40, 171, 210, 49, 222, 196, 95, 204, 207, 118, 44, 184, 216, 46, 54,
          219, 105, 179, 20, 149, 190, 98, 161, 59, 22, 102, 233, 92, 108, 109, 173,
          55, 97, 75, 185, 227, 186, 241, 160, 133, 131, 218, 71, 197, 176, 51, 250,
          150, 111, 110, 194, 246, 80, 255, 93, 169, 142, 23, 27, 151, 125, 236, 88,
          247, 31, 251, 124, 9, 13, 122, 103, 69, 135, 220, 232, 79, 29, 78, 4,
          235, 248, 243, 62, 61, 189, 138, 136, 221, 205, 11, 19, 152, 2, 147, 128,
          144, 208, 36, 52, 203, 237, 244, 206, 153, 16, 68, 64, 146, 58, 1, 38,
          18, 26, 72, 104, 245, 129, 139, 199, 214, 32, 10, 8, 0, 76, 215, 116]


# На вход и выход подаются 128 битные блоки
# Реализация функция преобразования S
def S(x):
    y = 0
    for i in reversed(range(16)):
        y <<= 8
        y ^= pi[(x >> (8 * i)) & 0xff]
    return y


# На вход и выход подаются 128 битные блоки
# Реализация обратной функции преобразования S
def S_inv(x):
    y = 0
    for i in reversed(range(16)):
        y <<= 8
        y ^= pi_inv[(x >> (8 * i)) & 0xff]
    return y


# На вход подаются неотрицательные целые числа
# Связанные с ними двоичные многочлены умножаются
# Возвращается целое число
def multiply_ints_as_polynomials(x, y):
    if x == 0 or y == 0:
        return 0
    z = 0
    while x != 0:
        if x & 1 == 1:
            z ^= y
        y <<= 1
        x >>= 1
    return z


# Returns the number of bits that are used
# to store the positive integer integer x.
def number_bits(x):
    nb = 0
    while x != 0:
        nb += 1
        x >>= 1
    return nb


# x is a nonnegative integer
# m is a positive integer
def mod_int_as_polynomial(x, m):
    nbm = number_bits(m)
    while True:
        nbx = number_bits(x)
        if nbx < nbm:
            return x
        mshift = m << (nbx - nbm)
        x ^= mshift


# x,y are 8-bits
# The output value is 8-bits
def kuznyechik_multiplication(x, y):
    z = multiply_ints_as_polynomials(x, y)
    m = int('111000011', 2)
    return mod_int_as_polynomial(z, m)




# The input x is 128-bits (considered as a vector of sixteen bytes)
# The return value is 8-bits
def kuznyechik_linear_functional(x):
    C = [148, 32, 133, 16, 194, 192, 1, 251, 1, 192, 194, 16, 133, 32, 148, 1]
    y = 0
    while x != 0:
        y ^= kuznyechik_multiplication(x & 0xff, C.pop())
        x >>= 8
    return y


# На вход и выход подаются 128 битные блоки
# Реализация функции R
def R(x):
    a = kuznyechik_linear_functional(x)
    return (a << 8 * 15) ^ (x >> 8)


# На вход и выход подаются 128 битные блоки
# Реализация обраной функции R
def R_inv(x):
    a = x >> 15 * 8
    x = (x << 8) & (2 ** 128 - 1)
    b = kuznyechik_linear_functional(x ^ a)
    return x ^ b


# На вход и выход подаются 128 битные блоки
# Реализация функции L
def L(x):
    for _ in range(16):
        x = R(x)
    return x


# На вход и выход подаются 128 битные блоки
# Реализация обратной функции L
def L_inv(x):
    for _ in range(16):
        x = R_inv(x)
    return x


# k - ключ, является 256-bits
# Алгоритм развертывания ключей
def kuznyechik_key_schedule(k):
    keys = []
    a = k >> 128
    b = k & (2 ** 128 - 1)
    keys.append(a)
    keys.append(b)
    for i in range(4):
        for j in range(8):
            c = L(8 * i + j + 1)
            (a, b) = (L(S(a ^ c)) ^ b, a)
        keys.append(a)
        keys.append(b)
    return keys


# Входной текст 128 бит
# Ключ 256 бит
def kuznyechik_encrypt(x, k):
    keys = kuznyechik_key_schedule(k)
    # запуск раундов
    for round in range(9):
        print(hex(x))
        x = L(S(x ^ keys[round]))

    print(hex(x))
    return x ^ keys[-1]


# The ciphertext x is 128-bits
# The key k is 256-bits
def kuznyechik_decrypt(x, k):
    keys = kuznyechik_key_schedule(k)
    keys.reverse()
    for round in range(9):
        print(hex(x))
        x = S_inv(L_inv(x ^ keys[round]))
    print(hex(x))
    return x ^ keys[-1]


def kuznyechik_cipher():
    # the key
    k = int('8899aabbccddeeff0011223344556677fedcba98765432100123456789abcdef', 16)
    my_text = int('41643843743d44c02002d02044d44243e02044343443843243844243543b44c43d43e43502043f44043843a43b44e44743543d43843502c02043f43e43b43d43e43502044043043743d43e43e43144043043743d44b44502044143e43144b44243843902043802043244144244043544702e02041202043a43043643443e43c02043c43e43c43543d44243502043c44b02043d43044543e43443843c02044744243e02d44243e02043d43e43243e43502043802044343d43843a43043b44c43d43e43502e02042144244043543c43b43543d43843502043a02044043e44144244302043802044143043c43e44043043743243844243844e02043243443e44543d43e43243b44f43544202043d43044102043d43002043f43e43844143a02043d43e43244b44502043343e44043843743e43d44243e43202e02041243043643d43e02043f43e43c43d43844244c02c02044744243e02043a43043643444b43902044843043302043243f43544043543402043f44043843d43e44143844202044102044143e43143e43902044344043e43a43802043802043e43f44b44202e02000a02002000a42043043743d43e43e43144043043743843502043a44343b44c44244344002c02044f43744b43a43e43202043802044244043043443844643843902043443543b43043544202043d43044802043c43844002044343443843243844243543b44c43d43e02043143e43343044244b43c02e02041e43144943543d43843502044102043b44e43444c43c43802044043043743d44b44502043d43044643843e43d43043b44c43d43e44144243543902044043044144843844044f43544202043a44044343343e43743e44002c02043f43e43743243e43b44f44f02043d43043c02043f43e43d43843c43044244c02043802044343243043643044244c02043444044343302043444044343343002e02041243743043843c43d43e43502044343243043643543d43843502043802044243544043f43843c43e44144244c02044143e43743443044e44202043e44143d43e43244302043443b44f02043343044043c43e43d43844743d43e43343e02044143e44144344943544144243243e43243043d43844f02e02000a02002000a41f44043844043e43443002044243e43643502043843344043043544202043243043643d44344e02044043e43b44c02043202043d43044843543902043643843743d43802e02041a44043044143e44243002043743043a43044243e43202c02044844343c02043e43a43543043d43002c02043f43543d43843502043f44243844602002d02043244143502044d44243e02043d43043f43e43c43843d43043544202043d43043c02043e02043243543b43844743843802043c43844043002043f44043844043e43444b02e02041743043143e44243002043e02043e43a44044343643044e44943543902044144043543443502044144243043d43e43243844244144f02043d43543e44244a43543c43b43543c43e43902044743044144244c44e02043e44243243544244144243243543d43d43e43343e02043e43144043043743002043643843743d43802e02000a02002000a42043043143e44243002043802044243243e44044743544144243243e02043f44043843443044e44202044143c44b44143b02043d43044843843c02044344143843b43844f43c02e02042144244043543c43b43543d43843502043a02043443e44144243843643543d43844e02044643543b43543902043c43e44243843243844044343544202043d43044102043d43002043d43e43244b43502043d43044743843d43043d43844f02e02041a43043643444b43902043f44043e43543a44202c02043443043643502044143043c44b43902043c43043b43543d44c43a43843902c02043f44043843d43e44143844202044343443e43243b43544243243e44043543d43843502043802044744343244144243243e02043244b43f43e43b43d43543d43d43e43343e02043443e43b43343002e02000a02002000a42143543c44c44f02043802043444044343744c44f02044f43243b44f44e44244144f02043d43043443543643d43e43902043e43f43e44043e43902043202043d43044843543902043643843743d43802e02041e43143c43543d02043844144243e44043844f43c43802c02043243544143543b44b43502043f43e44143843443543b43a43802043802043f43e43443443544043643a43002043202044244044343443d44b43502043c43e43c43543d44244b02044143e43743443044e44202044243543f43b44344e02043044243c43e44144443544044302043243743043843c43e43f43e43d43843c43043d43844f02043802043b44e43143243802e02000a02002042243043a43843c02043e43144043043743e43c02c02043d43044843002043643843743d44c02002d02044d44243e02043c43e43743043843a43002044043043743b43844743d44b44502043c43e43c43543d44243e43202c02044143e43543443843d43543d43d44b44502043243e43543443843d43e02e02041243043643d43e02044643543d43844244c02043a43043643444b43902043c43e43c43543d44202043802044144244043543c43844244c44144f02043443543b43044244c02043c43844002043243e43a44044343302043d43044102044f44044743502043802043b44344744843502e02042102043b44e43143e43244c44e02c02044243544043f43543d43843543c02043802044643543b43544344144244043543c43b43543d43d43e44144244c44e02043c44b02043c43e43643543c02044143e43743443043243044244c02044143243e44e02044343d43843a43043b44c43d44344e02043844144243e44043844e02c02043d43043f43e43b43d43543d43d44344e02044143c44b44143b43e43c02043802044043043443e441000044244c44e02e', 16)
    print('\n\nplain text', hex(my_text))
    print('\n\nstarting encrypt 9-rounds')
    CT = kuznyechik_encrypt(my_text, k)
    print('\n\nencrypt:', hex(CT))
    print('\n\nstarting decrypt 9-rounds')
    decrypt_text = kuznyechik_decrypt(CT, k)
    print('\n\ndecrypt:', hex(decrypt_text))
    # Сравнение текста исходного и конечного
    print('\n\nthey are similar?', decrypt_text == my_text)

kuznyechik_cipher()