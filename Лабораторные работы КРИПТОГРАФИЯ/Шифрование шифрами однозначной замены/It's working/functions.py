from math import gcd

alph = 'абвгдежзийклмнопрстуфхцчшщъыьэюя'

nums = ({0: 'глвц', 1: 'дшлй', 2: 'имрм', 3: 'лвцч', 4: 'дрцт',
          5: 'нтвф', 6: 'ееку', 7: 'шшйц', 8: 'ттчй', 9: 'втйл'})


reversedNums = ({'глвц': 0, 'дшлй': 1, 'имрм': 2, 'лвцч': 3,
                   'дрцт': 4, 'нтвф': 5, 'ееку': 6, 'шшйц': 7, 'ттчй': 8,
                   'втйл': 9})


# Таблица замены по ГОСТу.
sBlocks = {
    7: {'0': 'c', '1': '4', '2': '6', '3': '2', '4': 'a', '5': '5', '6': 'b', '7': '9', '8': 'e', '9': '8', 'a': 'd', 'b': '7', 'c': '0', 'd': '3', 'e': 'f', 'f': '1'},
    6: {'0': '6', '1': '8', '2': '2', '3': '3', '4': '9', '5': 'a', '6': '5', '7': 'c', '8': '1', '9': 'e', 'a': '4', 'b': '7', 'c': 'b', 'd': 'd', 'e': '0', 'f': 'f'},
    5: {'0': 'b', '1': '3', '2': '5', '3': '8', '4': '2', '5': 'f', '6': 'a', '7': 'd', '8': 'e', '9': '1', 'a': '7', 'b': '4', 'c': 'c', 'd': '9', 'e': '6', 'f': '0'},
    4: {'0': 'c', '1': '8', '2': '2', '3': '1', '4': 'd', '5': '4', '6': 'f', '7': '6', '8': '7', '9': '0', 'a': 'a', 'b': '5', 'c': '3', 'd': 'e', 'e': '9', 'f': 'b'},
    3: {'0': '7', '1': 'f', '2': '5', '3': 'a', '4': '8', '5': '1', '6': '6', '7': 'd', '8': '0', '9': '9', 'a': '3', 'b': 'e', 'c': 'b', 'd': '4', 'e': '2', 'f': 'c'},
    2: {'0': '5', '1': 'd', '2': 'f', '3': '6', '4': '9', '5': '2', '6': 'c', '7': 'a', '8': 'b', '9': '7', 'a': '8', 'b': '1', 'c': '4', 'd': '3', 'e': 'e', 'f': '0'},
    1: {'0': '8', '1': 'e', '2': '2', '3': '5', '4': '6', '5': '9', '6': '1', '7': 'c', '8': 'f', '9': '4', 'a': 'b', 'b': '0', 'c': 'd', 'd': 'a', 'e': '3', 'f': '7'},
    0: {'0': '1', '1': '7', '2': 'e', '3': 'd', '4': '0', '5': '5', '6': '8', '7': '3', '8': '4', '9': 'f', 'a': 'a', 'b': '6', 'c': '9', 'd': 'c', 'e': 'b', 'f': '2'}
}


# Таблица обратной замены, для получения исходных данных.
reversedSBlocks = {
    7: {'c': '0', '4': '1', '6': '2', '2': '3', 'a': '4', '5': '5', 'b': '6', '9': '7', 'e': '8', '8': '9', 'd': 'a', '7': 'b', '0': 'c', '3': 'd', 'f': 'e', '1': 'f'},
    6: {'6': '0', '8': '1', '2': '2', '3': '3', '9': '4', 'a': '5', '5': '6', 'c': '7', '1': '8', 'e': '9', '4': 'a', '7': 'b', 'b': 'c', 'd': 'd', '0': 'e', 'f': 'f'},
    5: {'b': '0', '3': '1', '5': '2', '8': '3', '2': '4', 'f': '5', 'a': '6', 'd': '7', 'e': '8', '1': '9', '7': 'a', '4': 'b', 'c': 'c', '9': 'd', '6': 'e', '0': 'f'},
    4: {'c': '0', '8': '1', '2': '2', '1': '3', 'd': '4', '4': '5', 'f': '6', '6': '7', '7': '8', '0': '9', 'a': 'a', '5': 'b', '3': 'c', 'e': 'd', '9': 'e', 'b': 'f'},
    3: {'7': '0', 'f': '1', '5': '2', 'a': '3', '8': '4', '1': '5', '6': '6', 'd': '7', '0': '8', '9': '9', '3': 'a', 'e': 'b', 'b': 'c', '4': 'd', '2': 'e', 'c': 'f'},
    2: {'5': '0', 'd': '1', 'f': '2', '6': '3', '9': '4', '2': '5', 'c': '6', 'a': '7', 'b': '8', '7': '9', '8': 'a', '1': 'b', '4': 'c', '3': 'd', 'e': 'e', '0': 'f'},
    1: {'8': '0', 'e': '1', '2': '2', '5': '3', '6': '4', '9': '5', '1': '6', 'c': '7', 'f': '8', '4': '9', 'b': 'a', '0': 'b', 'd': 'c', 'a': 'd', '3': 'e', '7': 'f'},
    0: {'1': '0', '7': '1', 'e': '2', 'd': '3', '0': '4', '5': '5', '8': '6', '3': '7', '4': '8', 'f': '9', 'a': 'a', '6': 'b', '9': 'c', 'c': 'd', 'b': 'e', '2': 'f'}
}



sBox = [["63", "7c", "77", "7b", "f2", "6b", "6f", "c5", "30", "01", "67", "2b", "fe", "d7", "ab", "76"],
        ["ca", "82", "c9", "7d", "fa", "59", "47", "f0", "ad", "d4", "a2", "af", "9c", "a4", "72", "c0"],
        ["b7", "fd", "93", "26", "36", "3f", "f7", "cc", "34", "a5", "e5", "f1", "71", "d8", "31", "15"],
        ["04", "c7", "23", "c3", "18", "96", "05", "9a", "07", "12", "80", "e2", "eb", "27", "b2", "75"],
        ["09", "83", "2c", "1a", "1b", "6e", "5a", "a0", "52", "3b", "d6", "b3", "29", "e3", "2f", "84"],
        ["53", "d1", "00", "ed", "20", "fc", "b1", "5b", "6a", "cb", "be", "39", "4a", "4c", "58", "cf"],
        ["d0", "ef", "aa", "fb", "43", "4d", "33", "85", "45", "f9", "02", "7f", "50", "3c", "9f", "a8"],
        ["51", "a3", "40", "8f", "92", "9d", "38", "f5", "bc", "b6", "da", "21", "10", "ff", "f3", "d2"],
        ["cd", "0c", "13", "ec", "5f", "97", "44", "17", "c4", "a7", "7e", "3d", "64", "5d", "19", "73"],
        ["60", "81", "4f", "dc", "22", "2a", "90", "88", "46", "ee", "b8", "14", "de", "5e", "0b", "db"],
        ["e0", "32", "3a", "0a", "49", "06", "24", "5c", "c2", "d3", "ac", "62", "91", "95", "e4", "79"],
        ["e7", "c8", "37", "6d", "8d", "d5", "4e", "a9", "6c", "56", "f4", "ea", "65", "7a", "ae", "08"],
        ["ba", "78", "25", "2e", "1c", "a6", "b4", "c6", "e8", "dd", "74", "1f", "4b", "bd", "8b", "8a"],
        ["70", "3e", "b5", "66", "48", "03", "f6", "0e", "61", "35", "57", "b9", "86", "c1", "1d", "9e"],
        ["e1", "f8", "98", "11", "69", "d9", "8e", "94", "9b", "1e", "87", "e9", "ce", "55", "28", "df"],
        ["8c", "a1", "89", "0d", "bf", "e6", "42", "68", "41", "99", "2d", "0f", "b0", "54", "bb", "16"]]


inverseSBox = [["52", "09", "6a", "d5", "30", "36", "a5", "38", "bf", "40", "a3", "9e", "81", "f3", "d7", "fb"],
               ["7c", "e3", "39", "82", "9b", "2f", "ff", "87", "34", "8e", "43", "44", "c4", "de", "e9", "cb"],
               ["54", "7b", "94", "32", "a6", "c2", "23", "3d", "ee", "4c", "95", "0b", "42", "fa", "c3", "4e"],
               ["08", "2e", "a1", "66", "28", "d9", "24", "b2", "76", "5b", "a2", "49", "6d", "8b", "d1", "25"],
               ["72", "f8", "f6", "64", "86", "68", "98", "16", "d4", "a4", "5c", "cc", "5d", "65", "b6", "92"],
               ["6c", "70", "48", "50", "fd", "ed", "b9", "da", "5e", "15", "46", "57", "a7", "8d", "9d", "84"],
               ["90", "d8", "ab", "00", "8c", "bc", "d3", "0a", "f7", "e4", "58", "05", "b8", "b3", "45", "06"],
               ["d0", "2c", "1e", "8f", "ca", "3f", "0f", "02", "c1", "af", "bd", "03", "01", "13", "8a", "6b"],
               ["3a", "91", "11", "41", "4f", "67", "dc", "ea", "97", "f2", "cf", "ce", "f0", "b4", "e6", "73"],
               ["96", "ac", "74", "22", "e7", "ad", "35", "85", "e2", "f9", "37", "e8", "1c", "75", "df", "6e"],
               ["47", "f1", "1a", "71", "1d", "29", "c5", "89", "6f", "b7", "62", "0e", "aa", "18", "be", "1b"],
               ["fc", "56", "3e", "4b", "c6", "d2", "79", "20", "9a", "db", "c0", "fe", "78", "cd", "5a", "f4"],
               ["1f", "dd", "a8", "33", "88", "07", "c7", "31", "b1", "12", "10", "59", "27", "80", "ec", "5f"],
               ["60", "51", "7f", "a9", "19", "b5", "4a", "0d", "2d", "e5", "7a", "9f", "93", "c9", "9c", "ef"],
               ["a0", "e0", "3b", "4d", "ae", "2a", "f5", "b0", "c8", "eb", "bb", "3c", "83", "53", "99", "61"],
               ["17", "2b", "04", "7e", "ba", "77", "d6", "26", "e1", "69", "14", "63", "55", "21", "0c", "7d"]]


Rcon = [["01", "00", "00", "00"], ["02", "00", "00", "00"],
        ["04", "00", "00", "00"], ["08", "00", "00", "00"],
        ["10", "00", "00", "00"], ["20", "00", "00", "00"],
        ["40", "00", "00", "00"], ["80", "00", "00", "00"],
        ["1b", "00", "00", "00"], ["36", "00", "00", "00"]]


rijndaelMatrix = [[2, 3, 1, 1], [1, 2, 3, 1], [1, 1, 2, 3], [3, 1, 1, 2]]
reversedRijndaelMatrix = [[14, 11, 13, 9], [9, 14, 11, 13], [13, 9, 14, 11], [11, 13, 9, 14]]



def encodingFormat(text):
    text = text.lower()
    text = text.replace('ё', 'е')
    text = text.replace(',', 'зпт')
    text = text.replace('.', 'тчк')
    text = text.replace('-', 'тире')
    text = text.replace('!', 'вскл')
    text = text.replace('?', 'впрс')
    text = text.replace('"', 'квч')
    text = text.replace("'", 'апт')
    text = text.replace(':', 'двтч')
    text = text.replace(';', 'ткзп')
    text = text.replace('(', 'лскб')
    text = text.replace(')', 'пскб')
    text = text.replace(' ', 'прбл')
    text = text.replace('\n', 'нвстр')
    for i in range(10):
        text = text.replace(str(i), nums[i])
    return text

def normalText(text):
    text = text.replace('зпт', ',')
    text = text.replace('тчк', '.')
    text = text.replace('тире', '-')
    text = text.replace('вскл', '!')
    text = text.replace('впрс', '?')
    text = text.replace('квч', '"')
    text = text.replace('двтч', ':')
    text = text.replace('ткзп', ';')
    text = text.replace('лскб', '(')
    text = text.replace('пскб', ')')
    text = text.replace('нвстр', '\n')
    text = text.replace('прбл', ' ')
    for i in reversedNums.keys():
        text = text.replace(i, str(reversedNums[i]))
    return text

def saveOutput(text):
    with open('output.txt', 'w+', encoding="utf-8") as output:
        output.flush()
        output.write(text)

def inputText():
    text = ""
    while text == "":
        fromFile = input("Считать текст из файла? (y/n)\n")
        if (fromFile == "y"):
            text = open(input("Введите имя файла, из которого нужно считать текст:\n")+".txt", "r", encoding="utf-8").read()
            break
        elif (fromFile == "n"):
            text = input("Введите текст:\n")
            break
        else:
            print("Некорректный ввод, повторите попытку.")
    return text

def bigrammList(str):  #Разбивает строку на биграммы (пары символов) и возвращает список биграмм.
    result = []
    i = 0
    while i < len(str):
        result.append(str[i:i+2])
        i += 2
    return result

def strToHex(text): #Преобразует текст в список шестнадцатеричных чисел (hex).
    result = []
    for i in text:
        result.append(hex(int(ord(i) - 1039))[2:].zfill(2))
    return result

def hexToStr(text):
    result = ''
    for i in text:
        result += chr(int(i, 16) + 1039)
    return result

def hexToBin(text, size): #Преобразует шестнадцатеричное число в бинарное представление. 
    if size == -1:
        return bin(int(text, 16))[2:]
    else:
        return bin(int(text, 16))[2:].zfill(size)

def binToHex(text, size):
    if size == -1:
        return hex(int(text, 2))[2:]
    else:
        return hex(int(text, 2))[2:].zfill(size)

def strToBin(text): #Преобразует текст в бинарную строку.
    result = ''
    for i in text:
        result += bin(int(ord(i) - 1039))[2:].zfill(16)
    return result

def binToStr(text):
    result = ''
    i = 0
    while i != len(text):
        result += chr(int(text[i : i + 16], 2) + 1039)
        i += 16
    return result

def strToDigits(text):  #Преобразует текст в список чисел, где каждое число представляет позицию соответствующей буквы в алфавите.
    result = []
    for i in text:
        result.append(alph.find(i)+1)
    return result

def digitsToStr(text):
    result = ''
    for i in text:
        result += alph[int(i)-1]
    return result

def appendToLenght(text, lenght): #Дополняет текст до указанной длины, повторяя начальные символы.
    i = 0
    while len(text) % lenght != 0:
        text += text[i]
        i += 1
    return text

def decreaseText(text): #Убирает повторяющуюся часть в конце текста.
    i = 1
    while text[:i] != text[-i:]:
        i += 1
    if i == len(text):
       i = 0
    text = text[:len(text) - i]
    return text


# Функция проверки, что введенная строка HEX
def isHex(text):
    for char in text:
        if ((char < '0' or char > '9') and
            (char < 'A' or char > 'F')):
            #print("Строка не является HEX")
            return False
    return True



# Функция проверки, что введенная строка binary
def isBinary(text):
    for char in text:
        if char < '0' or char > '1':
            #print("Строка не является Binary")
            return False
    return True

# Функция для проверки числа на простоту
def isPrime(number):
    for i in range(2, int(number ** 0.5) + 1):
        if number % i == 0:
            return False
    return True

# Функция для проверки двух чисел на взаимную простоту
def coprime(n, k):
    return gcd(n, k) == 1

